@import 'reset.min.less';
html{
  font-size:100px;  /*640px设计稿尺寸中：1rem = 100px*/
}
html,body{
  height:100%;
  overflow:hidden;
  background-color:#F4F4F4;
  font-family: 'Microsoft JhengHei';
}
.mainBox{
  margin: 0 auto;
  max-width: 640px;
  height: 100%;
  background-color:#FFF;
}
.loadingBox,.phoneBox,.messageBox,.cubeBox,.detailBox{
  display: none;
  position: relative;
  height: 100%;
  overflow: hidden;
}
/* loading */
.loadingBox{
  background-color: #000;
  .title{
    position: absolute;
    left: 0;
    top: 50%;
    margin-top: -2.2rem;
    height: 1.4rem;
    width: 100%;
    color: #FFF;
    text-align: center;
    h1{
      font-size: .5rem;
      line-height: .75rem;
    }
    h2{
      margin-top: .2rem;
      line-height: .45rem;
      font-size: .26rem;
      letter-spacing: .04rem;
    }
  }
  .progress{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-2.3rem,1.15rem);
    width: 4.6rem;
    height: .3rem;
    background-color: #FFF;
    .current{
      position: absolute;
      top: 0;
      left: 0;
      width: 0%;
      height: 100%;
      background:-webkit-linear-gradient(45deg,#5cb85c 0%,#5cb85c 25%,#74C274 25%,#74C274 50%,#5cb85c 50%,#5cb85c 75%,#74C274 75%,#74C274 100%);
      background-size: .3rem .3rem;
      animation: loadingMove .3s linear 0s infinite both;
      //给current设置一个过渡动画
      transition:all 3s linear 0s;
    }
  }
}
@keyframes loadingMove{
  from{
    background-position: 0 0;
  }
  to{
    background-position: 0 -.3rem;
  }
}

/* phone */
.phoneBox{
  background: url('../img/zf_phoneBg.jpg') no-repeat;
  background-size: cover;
  h2{
    margin-top: .8rem;
    text-align: center;
    p{
      width: 100%;
      height: 1.25rem;
      font-size: .6rem;
      color: #FFF;
      text-align: center;
    }
    span{
      line-height: .3rem;
      font-size: .3rem;
      color: #FFF;
      letter-spacing: .05rem;
      display: none;
    }
  }
  .answer{
    position:absolute;
    left:50%;
    bottom:0;
    margin: 0 0 .3rem -2.6rem;
    width: 5.2rem;
    height: 3.6rem;
    background: url('../img/zf_phoneListen.png') no-repeat;
    background-size: 100% 100%;
    .markMove{
      position: absolute;
      right: -.07rem;
      bottom: .45rem;
      width: 1.6rem;
      height: 1.6rem;
      border-radius:50%;
      border: .03rem solid #0F0;
      animation: answerMove .8s linear infinite both;
    }
    .markLink{
      .markMove; //这里相当于把.markMove共同样式拿过来使用
      animation: none;
      border-radius: 0;
      border: none; //实现无边框效果
    }
  }
  .hang{
    position: absolute;
    left: 50%;
    bottom: .3rem;
    margin-left: -2.6rem;
    width: 5.2rem;
    height: 6.59rem;
    background: url('../img/zf_phoneDetail.png') no-repeat;
    background-size: 100% 100%;
    /* 初始位置是在phone的底部(看不见:溢出内容隐藏),当点击接听按钮后,控制它从底下出来即可(js中改变样式)
    我们可以基于transform改变样式的尽量不要使用传统的样式属性,因为transfrom中开启了浏览器的
    硬件加速,性能更高一些*/
    transform: translateY(6.89rem);
    transition: transform .3s linear 0s;
    .markLink{
      position: absolute;
      left: 50%;
      bottom: .28rem;
      margin-left: -.8rem;
      width: 1.6rem;
      height: 1.6rem;
    }
  }
}
@keyframes answerMove{
  from{
    transform: scale(1.2); //第二参数(y)不写,默认等于第一个参数(x)
  }
  to{
    transform: scale(.9);
  }
}

/* message */
.messageBox{
  display: block;
  background-color: #EAEAEA;
  .wrapper{
    position: absolute;
    top: .2rem;
    left: 0;
    width: 100%;
    transform: translateY(-.3rem);
    transition: .3s;
    li{
      position:relative;
      max-width: 3.6rem;
      padding: .25rem;
      margin-bottom: .4rem;
      border-radius: .1rem;
      line-height: .4rem;
      font-size: .26rem;
      opacity: 0;
      word-wrap:break-word;
      &.active{
        animation: messageListMove .3s linear both;
      }
      .pic{
         position: absolute;
         top: 0;
         width: .82rem;
         height: .82rem;
         border-radius: 50%;
       }
      .arrow{
        position: absolute;
        top: .2rem;
        width: .1rem;
        height: .2rem;
      }
      &.self{
        float: left;
        margin-left: 1.25rem;
        background-color: #FFF;
        border: .02rem solid #CACACA;
        .pic{
          left: -1rem;
        }
        .arrow{
          left: -.1rem;
          background:url('../img/zf_messageArrow1.png') no-repeat;
          background-size: 100% 100%;
        }
      }
      &.inter{
        float: right;
        margin-right: 1.25rem;
        background-color: #A2E45C;
        border: .02rem solid #96B474;
        .pic{
          right: -1rem;
        }
        .arrow{
          right: -.1rem;
          background:url('../img/zf_messageArrow2.png') no-repeat;
          background-size: 100% 100%;
        }
      }
    }
  }
  .keyBoard{
    position: absolute;
    left: 0;
    bottom : -.5rem;
    box-sizing: border-box;
    width: 100%;
    height: 5.16rem;
    background: url('../img/zf_messageKeyboard.png') no-repeat;
    background-size: 100% 100%;
    transform: translateY(3.7rem);
    transition: transform .3s linear 0s;
    span{
      position: absolute;
      width: 4rem;
      height: .4rem;
      font-size: .25rem;
      top: .35rem;
      left: .9rem;
    }
    .submit{
      display: none;
      position: absolute;
      right: .1rem;
      bottom: .6rem;
      width: 1.47rem;
      height: .74rem;
      background: url('../img/zf_messageChat.png') no-repeat;
      background-size: 100% 100%;
    }
  }
}
@keyframes messageListMove{
  from{
    transform: translateY(1rem);
    opacity: 0;
  }
  to{
    transform: translateY(0rem);
    opacity: 1;
  }
}

/*CUBE*/
.cubeBox {
  background: url("../img/zf_cubeBg.jpg") no-repeat;
  background-size: cover;

  .cube {
    position: absolute;
    top: 50%;
    left: 50%;
    margin: -2.55rem 0 0 -2.55rem;
    width: 5.1rem;
    height: 5.1rem;

    li {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;

      img {
        display: block;
        width: 100%;
        height: 100%;
      }
    }
  }

  .tip {
    position: absolute;
    bottom: .5rem;
    left: 50%;
    margin-left: -1.97rem;
    width: 3.94rem;
    height: .44rem;
  }
}

//=>在二维平面中实现3D效果
.cubeBox {
  //1.给需要实现3D变形元素所在的舞台设置“视距”(1000~2000)
  perspective: 2000px;

  .cube {
    //2.给需要操作的元素设置3D变形效果
    transform-style: preserve-3d;

    //3.基于TRASFORM实现3D变形
    li {
      &:nth-child(1) {
        transform: translateZ(2.55rem);
      }

      &:nth-child(2) {
        transform: translateZ(-2.55rem) rotateY(180deg);
      }

      &:nth-child(3) {
        transform: translateX(2.55rem) rotateY(90deg);
      }

      &:nth-child(4) {
        transform: translateX(-2.55rem) rotateY(-90deg);
      }

      &:nth-child(5) {
        transform: translateY(-2.55rem) rotateX(90deg);
      }

      &:nth-child(6) {
        transform: translateY(2.55rem) rotateX(-90deg);
      }
    }

    //4.给魔方一个初始的旋转角度，让其可以看到3D的效果（旋转后太大了，把魔方缩小一点）
    transform: scale(0.6) rotateX(-35deg) rotateY(35deg);
    transition: .3s; //=>后期让魔方旋转的时候有一个平稳的过渡动画效果
  }
}

/* detailBox */
.detailBox{
  .swiper-container{
    height: 100%;
    overflow: hidden;
    .swiper-slide{
      position: relative; /*每一个页面中的元素相对于自己的页面定位*/
      width: 100%;
      height: 100%;
      overflow: hidden;
      &:nth-child(2){
        background-color: #FFF9C1;
      }
      &:nth-child(3){
        background-color: #E45454;
      }
      &:nth-child(4){
        background-color: #FAC471;
      }
      &:nth-child(5){
        background-color: #FBFFE8;
      }
      &:nth-child(6){
        background-color: #a5fbff;
      }
    }
  }

  /* page1 */
  .page1{
    dl{
      position: absolute;
      left: 50%;
      top: 50%;
      margin: -3.6rem 0 0 -2.7rem;
      width: 5.4rem;
    }
    dt,dd{
      box-sizing: border-box;
      height: auto;
      line-height: .6rem;
      background-color: #8FBB4C;
    }
    dt{
      text-align: center;
      font-size: .4rem;
      color: yellow;
    }
    dd{
      position: relative;
      border-top: .02rem dashed rgba(255,255,255,.3);
      em{
        position: absolute;
        left: .15rem;
        top: 50%;
        margin-top: -.21rem;
        width: .36rem;
        height: .42rem;
        line-height: .42rem;
        text-align: center;
        font-size: .2rem;
        font-style: normal;
        color: #FFF;
        background: url('../img/zf_outline.png') no-repeat;
        background-size: 100% 100%;
      }
      a{
        position: relative;
        display: block;
        margin-left: .66rem;
        font-size: .25rem;
        color: #000;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      em,a{
        z-index: 1000; //=>基于makisu实现3D折叠,为了保证内容不被折叠创建的span遮住,我们需要把内容的层级提高
      }
    }
  }
  .page2{
    h2{
      margin-top: .8rem;
      line-height: .9rem;
      text-align: center;
      font-size: .6rem;
      font-weight: normal;
      opacity: 0;
    }
    img{
      position: absolute;
      top: 50%;
      left: 50%;
      margin: -.5rem 0 0 -.5rem;
      width: 1rem;
      height: 1rem;
      opacity: 0;
      transition: .5s; //=> 从中心到四周的动画我们可以基于transition完成
      border-radius: 50%;
      &:nth-last-of-type(1){
        margin: -.85rem 0 0 -.66rem;
        width: 1.32rem;
        height: 1.7rem;
      }
    }
  }
  /*
  基于swiper实现切换到哪一个也卡,让哪一个也卡中的后代元素有动画效果
    1.除了编写正常的CSS样式(都写在page-x中),把需要实现动画元素对应的动画写在#page-x中(ie选择器优先级高)
    2.在swiper插件的某些回调函数中(例如:onTransitionEnd...)获取当前展示slide的索引,根据索引为其设置对应的ID值,
    当前展示的slide有Id,其余的没有id
    3.为了保证切换到这一页面的时候,元素是动画运动出来的(也就是开始啥都看不见),每个元素都是基于动画显示的(在初始
    样式中,把所有需要运动的元素透明度设置为零)加ID后执行动画效果,在动画最后一帧位置让透明度为1即可
  */
  #page2{
    //-> page2 中动画都写在id选择器中
    h2{
      animation: bounceInLeft 1s both;
    }
    img{
      &:nth-last-of-type(1){
        animation: shake 1s both;
      }
      &:not(:nth-last-of-type(1)){
        animation: tada 1s 1s infinite;
        opacity: 1;
      }
      &:nth-of-type(1){
        margin-top: -2.9rem;
      }
      &:nth-of-type(2){
        margin-top: -1.7rem;
        margin-left: 1.5rem;
      }
      &:nth-of-type(3){
        margin-top: .7rem;
        margin-left: 1.5rem;
      }
      &:nth-of-type(4){
        margin-top: 1.9rem;
      }
      &:nth-of-type(5){
        margin-top: .7rem;
        margin-left: -2.5rem;
      }
      &:nth-of-type(6){
        margin-top: -1.7rem;
        margin-left: -2.5rem;
      }
    }
  }
}
/* h2滑 */
@keyframes bounceInLeft {
  from,
  60%,
  75%,
  90%,
  to {
    -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }

  0% {
    opacity: 0;
    -webkit-transform: translate3d(-3000px, 0, 0);
    transform: translate3d(-3000px, 0, 0);
  }

  60% {
    opacity: 1;
    -webkit-transform: translate3d(25px, 0, 0);
    transform: translate3d(25px, 0, 0);
  }

  75% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  90% {
    -webkit-transform: translate3d(5px, 0, 0);
    transform: translate3d(5px, 0, 0);
  }

  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}

/* 中间img抖一抖 */
@keyframes shake {
  from,
  to {
    -webkit-transform: translate3d(0, 0, 0);
    transform: translate3d(0, 0, 0);
  }
  0%{
    opacity: 0;
  }
  100%{
    opacity: 1;
  }
  10%,
  30%,
  50%,
  70%,
  90% {
    -webkit-transform: translate3d(-10px, 0, 0);
    transform: translate3d(-10px, 0, 0);
  }

  20%,
  40%,
  60%,
  80% {
    -webkit-transform: translate3d(10px, 0, 0);
    transform: translate3d(10px, 0, 0);
  }
}

/* 其他小的img */
@keyframes tada {
  from {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }

  10%,
  20% {
    -webkit-transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg);
  }

  30%,
  50%,
  70%,
  90% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg);
  }

  40%,
  60%,
  80% {
    -webkit-transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
    transform: scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg);
  }

  to {
    -webkit-transform: scale3d(1, 1, 1);
    transform: scale3d(1, 1, 1);
  }
}






















